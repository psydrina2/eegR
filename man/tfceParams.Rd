% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/param_setters.R
\name{tfceParams}
\alias{tfceParams}
\title{Setting the parameters for TFCE correction}
\usage{
tfceParams(ChN = NULL, EH = NULL, auto = TRUE, steps = 50L)
}
\arguments{
\item{ChN}{channel neighbourhood matrix}

\item{EH}{numeric vector giving the E and H parameters}

\item{auto}{logical; if set to TRUE (default), ChN and EH are set 
automagically. See Details.}

\item{steps}{integer value indicating the number of thresholding steps 
(default: 50L)}
}
\description{
\code{tfceParams} sets the parameters for TFCE correction
}
\details{
The TFCE correction has three parameters: the channel neighbourhood
matrix, and the E and H parameters. The channel neighb. matrix is usually 
generated by \code{\link{chanNb}}. The E and H parameters should be fixed at 
c(0.66, 2) for t-tests and c(0.66, 1) for F-tests, unless you have very
good reasons to change these defaults. 
If 'auto' is TRUE and 'ChN' is NULL, \code{tfceParams} looks for an object 
named '.arraydat' and tries to extract its 'ChN' attribute. This usually 
works because in the functions which perform TFCE correction 
(\code{\link{arrayAnova}} and \code{\link{arrayTtest}}), the data argument is
named as \code{.arraydat}. If this automatic lookup fails, \code{tfceParams}
fails with an informative error message. 
If 'auto' is TRUE and 'EH' is NULL, \code{tfceParams} investigates if it was 
called from a function which has "anova" in its name (upper- or lower-case 
does not matter) or not. In the former case EH is set to \code{c(0.66, 1)}, 
otherwise \code{c(0.66, 2)}.
}
\note{
IMPORTANT! Be extremely careful with the 'auto' parameter.
}
\examples{
# use example dataset
data(erps)

# create channel neighb. matrix
chan_pos <- attr(erps, "chan")
chn <- chanNb(chan_pos, alpha = 0.7) # see ?chanNb how to find alpha
attr(erps, "ChN") <- chn

# create a dummy function
myAnova <- function(.arraydat) {
    tfce <- tfceParams()
    tfce
}

# check what it returns
res <- myAnova(erps)
str(res)
stopifnot(identical(res, 
                    structure(list(ChN = chn, EH = c(0.66, 1), steps = 50L), 
                              class = "tfceParams")
                   ))

# if called from the global environment, provide ChN and EH
myAnova2 <- function(.arraydat, tfce = NULL) tfce

# this fails
res <- try(myAnova2(erps, tfce = tfceParams()), silent = TRUE)
stopifnot(inherits(res, "try-error"))
res[1]

# this works
res <- myAnova2(erps, tfce = tfceParams(ChN = chn, EH = c(0.66, 1)))
str(res)

}
