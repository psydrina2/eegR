% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/utilities.R
\name{argumentDeparser}
\alias{argumentDeparser}
\title{Pass \code{arg = .(key1 = value1, key2 = value2)} function arguments}
\usage{
argumentDeparser(arg, replace_dot, transform_true = TRUE,
  null_params = NULL)
}
\arguments{
\item{arg}{an unevaluated call, see Details}

\item{replace_dot}{a character string which defines the function to which
\code{arg} should be passed to. If not provided, the name of \code{arg} is
guessed using \code{deparse} and \code{substitute}, and "Params" is attached
to call the corresponding parameter setter function.}

\item{transform_true}{logical; if TRUE (default), a single logical
\code{arg} argument is treated in a special way (see Details)}

\item{null_params}{a list of parameters which is passed to the parameter
setter function (see 'replace_dot') if \code{argumentDeparser} would return
NULL}
}
\description{
\code{argumentDeparser} passes \code{arg = .(key1 = value1, key2 = value2)}
function arguments to the appropriate function
}
\details{
This function is not intended for direct use. It allows
\code{method = .(key = value)} argument definition in high-level functions
by substituting \code{.} to the appriopriate \code{methodParams}
function. If \code{transform_true} is TRUE, the call
\code{method = TRUE} is transformed to \code{method = methodParams()},
thereby it returns the default parameter setting.
}
\examples{
mymethodParams <- function(x = 3, y = 4) {
    list(x = x, y = y)
}
tempfn <- function(mymethod = NULL) {
    argumentDeparser(substitute(mymethod), "mymethodParams")
}
stopifnot(is.null(tempfn()))
stopifnot(identical(FALSE, tempfn(mymethod = FALSE)))
stopifnot(identical(tempfn(mymethod = TRUE),
                    tempfn(mymethod = mymethodParams())))
new_y = 1:5
stopifnot(identical(tempfn(mymethod = .(y = new_y)),
                    tempfn(mymethod = mymethodParams(y = new_y))))
}
\keyword{internal}

