% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matstat.R
\name{rollFun}
\alias{rollFun}
\title{Compute rolling (a.k.a. moving) window statistics}
\usage{
rollFun(dat, width, FUN, force_rollapply = FALSE, ...)
}
\arguments{
\item{dat}{a numeric vector, matrix or data.frame. In the latter cases
rolling statistics are computed column-wise.}

\item{width}{width of moving window; can be an integer value or vector.}

\item{FUN}{the function to be applied to compute moving window statistics. 
See details.}

\item{force_rollapply}{logical variable; if yes, \code{zoo::rollapply} is 
called (default = FALSE).}

\item{...}{optional arguments to the corresponding function in \pkg{caTools}
or \code{zoo::rollapply}}
}
\value{
An object having the same attributes as dat.
}
\description{
\code{rollFun} computes rolling window statistics on vectors or matrices.
}
\details{
If FUN is one of \code{min}, \code{max}, \code{mean}, \code{sd}, 
\code{mad}, \code{quantile} (OR "min", "max", "mean", etc.) \code{rollFun} 
calls the corresponding function from the \pkg{caTools} package (e.g. 
\code{caTools::runmin}). Otherwise, or if \code{force_rollapply} is TRUE,
\code{zoo::rollapply} is called.
}
\examples{
# either caTools or zoo must be installed before using this function;
# here follows a timing comparison for caTools and zoo, so we need both
if (require(caTools) && require(zoo)) {
    # create a matrix
    x <- matrix_(rnorm(2e4), 1e2, 2e2)

    # compute rolling mean for each columns, set the width of the 
    # sliding window to 5
    system.time(roll_mean_catools <- rollFun(x, 5, mean))
    system.time(roll_mean_zoo <- rollFun(x, 5, mean, force_rollapply = TRUE))
    
    # caTools is much faster for the standard statistics, and the results
    # are the same
    stopifnot(all.equal(roll_mean_catools, roll_mean_zoo))
}

}

