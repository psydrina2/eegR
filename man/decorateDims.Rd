% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/array_transform.R
\name{decorateDims}
\alias{decorateDims}
\alias{decorateDims_}
\title{Add dimension names to a matrix or array with (partially) missing dimension
names}
\usage{
decorateDims(dat, names = TRUE, new_names = NULL, new_dimnames = NULL)

decorateDims_(dat, names = TRUE, new_names = NULL, new_dimnames = NULL)
}
\arguments{
\item{dat}{a matrix or array}

\item{names}{logical; if TRUE (default), named list of dimnames are returned.
Ignored (or more precisely, considered TRUE) if new_names is provided.}

\item{new_names}{character vector for named dimnames}

\item{new_dimnames}{list of new dimension names. If 'new_names' is not
provided but 'new_dimnames' is a named list, its names are considered as
'new_names'.}
}
\value{
\code{decorateDims} returns a \emph{copy} of the original matrix or
array with non-null dimension names. \code{decorateDims} invisibly returns
the \emph{original} matrix or array with modified dimnames attribute.
}
\description{
\code{decorateDims} is not unlike \code{\link{provideDimnames}}: it provides
dimension names for dimensions which have 'missing' dimension names
('missing' in a broad sense: either NA, NULL or ""). The main difference is
that it has a more convenient interface for providing names of dimensions,
and via \code{decorateDims_} the user can modify the input data in place
(without creating even a shallow copy).
}
\note{
Use \code{decorateDims_} with extra care because it modifies in place
all objects which 'dat' refers to.
}
\examples{
# create a matrix without dimension names
mat <- matrix(rnorm(1:10), 2, 5)

# add default dimension names
mat2 <- decorateDims(mat)
str(mat2)

# remove names from the 'dimnames' attribute
names(dimnames(mat2)) <- NULL

# create a new variable which is referenced to 'mat2'
mat3 <- mat2

# modify the names of dimnames in place
new_names <- c("Row dimension", "Column dimension")
decorateDims_(mat3, new_names = new_names)
str(mat3)
stopifnot(identical(names(dimnames(mat3)),
                    new_names))

# NOTE that the attributes of 'mat2' has been also changed!
str(mat2)
stopifnot(identical(dimnames(mat2), dimnames(mat3)))
}
\seealso{
\code{\link{provideDimnames}} for a slightly different solution
}

